import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth, withAuth } from '@/contexts/AuthContext';
import { supabase } from '@/lib/supabase';
import Link from 'next/link';
import { 
  UserIcon, 
  KeyIcon, 
  EnvelopeIcon, 
  CalendarIcon,
  SparklesIcon,
  TrashIcon,
  PlusIcon,
  EyeIcon,
  EyeSlashIcon,
  ClipboardIcon,
  CheckIcon,
  DocumentTextIcon,
  ArrowTopRightOnSquareIcon,
  PencilIcon
} from '@heroicons/react/24/outline';

interface ApiKey {
  id: string;
  name: string;
  key: string;
  expires_in_days: number;
  created_at: string;
  last_used_at?: string;
}

interface UserPrompt {
  id: string;
  name: string;
  description: string;
  category: string;
  tags: string[];
  is_public: boolean;
  created_at: string;
  updated_at?: string; // 设为可选，与Supabase适配器的Prompt类型兼容
  user_id?: string;
  version?: number;
  messages?: any[];
}

const ProfilePage = () => {
  const { user, getToken } = useAuth();
  const [activeTab, setActiveTab] = useState('profile');
  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);
  const [userPrompts, setUserPrompts] = useState<UserPrompt[]>([]);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newKeyName, setNewKeyName] = useState('');
  const [newKeyExpiry, setNewKeyExpiry] = useState(30);
  const [visibleKeys, setVisibleKeys] = useState<Set<string>>(new Set());
  const [copiedKey, setCopiedKey] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [promptsLoading, setPromptsLoading] = useState(false);
  const [promptCount, setPromptCount] = useState(0);
  const [promptCounts, setPromptCounts] = useState<{total: number, public: number, private: number}>({total: 0, public: 0, private: 0});

  const tabs = [
    { id: 'profile', name: '个人资料', icon: UserIcon },
    { id: 'api-keys', name: 'API密钥', icon: KeyIcon },
    { id: 'my-prompts', name: '我的提示词', icon: DocumentTextIcon },
  ];

  const expiryOptions = [
    { value: 7, label: '7天' },
    { value: 30, label: '30天' },
    { value: 90, label: '90天' },
    { value: 365, label: '1年' },
    { value: -1, label: '永不过期' },
  ];

  // 当激活标签变化或用户登录状态变化时加载数据
  useEffect(() => {
    if (!user?.id) {
      console.log('用户未登录或会话过期，无法获取数据');
      return;
    }
    
    if (activeTab === 'api-keys') {
      // 等待页面加载完成后再执行请求
      console.log('正在获取API密钥, 用户ID:', user.id);
      
      // 尝试刷新会话并获取密钥
      try {
        // 触发会话刷新
        supabase.auth.refreshSession().then(() => {
          // 会话刷新后立即获取API密钥
          console.log('刷新会话后获取API密钥');
          fetchApiKeys();
        }).catch(() => {
          // 即使刷新失败也尝试获取API密钥
          console.log('刷新会话失败，仍然尝试获取API密钥');
          fetchApiKeys();
        });
      } catch (error) {
        console.error('刷新会话时出错:', error);
        // 即使出错也尝试获取API密钥
        fetchApiKeys();
      }
    } else if (activeTab === 'my-prompts') {
      console.log('正在获取用户提示词, 用户ID:', user.id);
      fetchUserPrompts();
    }
  }, [activeTab, user?.id]); // 监听标签和用户ID变化

  // 加载用户提示词
  useEffect(() => {
    if (activeTab === 'my-prompts') {
      fetchUserPrompts();
    }
  }, [activeTab]);

  // 加载用户提示词数量（用于统计）
  useEffect(() => {
    fetchPromptCount();
  }, []);

  // 带超时保护的API密钥获取函数
  const fetchApiKeys = async () => {
    // 防止重复调用
    if (loading) {
      console.log('已经在加载中，跳过重复请求');
      return;
    }
    
    setLoading(true);
    
    // 设置超时计时器，确保加载状态不会无限持续
    const timeoutId = setTimeout(() => {
      console.warn('获取API密钥超时');
      setLoading(false);
      setApiKeys([]);
    }, 8000); // 8秒超时
    
    try {
      console.log('开始直接从数据库获取API密钥...');
      
      // 检查用户ID
      if (!user?.id) {
        console.error('用户ID不可用');
        setApiKeys([]);
        return;
      }
      
      // 直接执行数据库查询
      const { data, error } = await supabase
        .from('api_keys')
        .select('id, name, created_at, last_used_at, expires_at')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      
      clearTimeout(timeoutId); // 查询完成后立即清除超时计时器
      
      if (error) {
        console.error('查询API密钥失败:', error);
        setApiKeys([]);
        return;
      }
      
      if (!data || data.length === 0) {
        console.log('未找到API密钥');
        setApiKeys([]);
        return;
      }
      
      console.log('获取到API密钥:', data.length, '个');
      
      // 处理数据，添加缺失的字段
      const formattedKeys = data.map(key => ({
        ...key,
        user_id: user.id,
        key: '*'.repeat(16) + (key.id?.substring(0, 8) || ''), // 使用ID前8位作为密钥的可见部分
      }));
      
      setApiKeys(formattedKeys);
    } catch (error: any) {
      console.error('获取API密钥时出错:', error);
      // 静默处理错误，不显示用户提示
      setApiKeys([]);
    } finally {
      clearTimeout(timeoutId); // 再次确保超时计时器被清除
      setLoading(false); // 确保加载状态结束
    }
  };

  const fetchUserPrompts = async () => {
    setPromptsLoading(true);
    try {
      // 直接使用Supabase适配器获取用户提示词
      const { default: supabaseAdapter } = await import('@/lib/supabase-adapter');
      
      if (!user?.id) {
        console.warn('未登录用户无法获取提示词');
        setPromptsLoading(false);
        return;
      }
      
      try {
        // 使用适配器获取用户提示词
        const result = await supabaseAdapter.getPrompts({
          userId: user.id,
          page: 1,
          pageSize: 20
        });
        
        console.log('获取到用户提示词:', result.data.length);
        setUserPrompts(result.data || []);
      } catch (adapterError) {
        console.error('通过适配器获取提示词失败:', adapterError);
        
        // 如果适配器方法失败，回退到直接API调用
        const token = await getToken();
        if (!token) {
          console.error('无法获取认证令牌');
          return;
        }
        
        const response = await fetch('/api/profile/prompts?pageSize=20', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          setUserPrompts(data.prompts || []);
        }
      }
    } catch (error) {
      console.error('获取用户提示词失败:', error);
    } finally {
      setPromptsLoading(false);
    }
  };

  const fetchPromptCount = async () => {
    try {
      // 直接使用Supabase适配器获取提示词计数
      const { default: supabaseAdapter } = await import('@/lib/supabase-adapter');
      
      if (!user?.id) {
        console.warn('未登录用户无法获取提示词计数');
        setPromptCounts({ total: 0, public: 0, private: 0 });
        return;
      }
      
      try {
        // 使用适配器获取用户所有提示词
        const result = await supabaseAdapter.getPrompts({
          userId: user.id,
          page: 1,
          pageSize: 1000  // 大量传输以便统计
        });
        
        const promptsList = result.data || [];
        const totalCount = promptsList.length;
        const publicCount = promptsList.filter(p => p.is_public).length;
        const privateCount = totalCount - publicCount;
        
        console.log('提示词计数统计:', { total: totalCount, public: publicCount, private: privateCount });
        
        setPromptCounts({
          total: totalCount,
          public: publicCount,
          private: privateCount
        });
      } catch (adapterError) {
        console.error('通过适配器获取提示词计数失败:', adapterError);
        
        // 如果适配器方法失败，回退到直接API调用
        const token = await getToken();
        if (!token) {
          console.error('无法获取认证令牌');
          setPromptCounts({ total: 0, public: 0, private: 0 });
          return;
        }
        
        const response = await fetch('/api/profile/prompts?pageSize=1000', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          const totalCount = data.prompts ? data.prompts.length : 0;
          const publicCount = data.prompts ? data.prompts.filter((p: any) => p.is_public).length : 0;
          const privateCount = totalCount - publicCount;
          
          setPromptCounts({
            total: totalCount,
            public: publicCount,
            private: privateCount
          });
        } else {
          setPromptCounts({ total: 0, public: 0, private: 0 });
        }
      }
    } catch (error) {
      console.error('获取提示词统计失败:', error);
      setPromptCounts({ total: 0, public: 0, private: 0 });
    }
  };

  // 简化版创建API密钥函数
  const createApiKey = async () => {
    if (!newKeyName.trim()) {
      alert('请输入API密钥名称');
      return;
    }

    setLoading(true);

    try {
      // 检查用户ID
      if (!user?.id) {
        alert('用户未登录或会话已过期，请刷新页面');
        return;
      }

      // 生成一个唯一的API密钥
      const apiKeyValue = generateUniqueKey(64); // 生成一个64位的密钥
      
      // 计算过期时间
      const now = new Date();
      let expiresAt = null;
      
      if (newKeyExpiry > 0) {
        expiresAt = new Date();
        expiresAt.setDate(now.getDate() + newKeyExpiry);
      }
      
      // 使用加盘算法生成密钥哈希，只存储哈希值
      const encoder = new TextEncoder();
      const data = encoder.encode(apiKeyValue);
      const hashBuffer = await crypto.subtle.digest('SHA-256', data);
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
      
      console.log('正在创建API密钥...', { 
        name: newKeyName, 
        expiryDays: newKeyExpiry,
        expires_at: expiresAt
      });
      
      // 直接向数据库插入新密钥记录
      const { data: insertedKey, error: insertError } = await supabase
        .from('api_keys')
        .insert({
          user_id: user.id,
          name: newKeyName,
          key_hash: hashHex,
          expires_at: expiresAt ? expiresAt.toISOString() : null,
          created_at: now.toISOString()
        })
        .select('id, name, created_at, expires_at')
        .single();
      
      if (insertError) {
        console.error('向数据库插入API密钥失败:', insertError);
        alert(`创建API密钥失败: ${insertError.message}`);
        return;
      }
      
      if (!insertedKey) {
        alert('创建API密钥失败: 没有收到数据库响应');
        return;
      }
      
      // 组合返回结果并包含原始密钥（只在创建时展示一次）
      const newKey = {
        ...insertedKey,
        user_id: user.id,
        key: apiKeyValue, // 原始密钥值，只在前端展示一次
        last_used_at: null
      };
      
      console.log('API密钥创建成功');
      
      // 更新界面状态
      setApiKeys(prev => [newKey, ...prev]);
      setNewKeyName('');
      setShowCreateForm(false);
      
      // 尝试复制到剪贴板
      try {
        await navigator.clipboard.writeText(apiKeyValue);
        alert(`API密钥创建成功并已复制到剪贴板:\n${apiKeyValue}\n\n注意: 这是唯一一次显示完整密钥的机会!`);
      } catch (clipboardError) {
        alert(`API密钥创建成功。请手动复制密钥:\n${apiKeyValue}\n\n注意: 这是唯一一次显示完整密钥的机会!`);
      }
    } catch (error: any) {
      console.error('创建API密钥时出错:', error);
      alert(`创建API密钥失败: ${error.message || '未知错误'}`);
    } finally {
      setLoading(false);
    }
  };
  
  // 生成唯一密钥的帮助函数
  function generateUniqueKey(length: number): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const prefix = 'pk_';
    let result = prefix;
    
    for (let i = 0; i < length - prefix.length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    return result;
  }
  
  const deleteApiKey = async (keyId: string) => {
    if (!confirm('确定要删除此API密钥吗？此操作无法撤销。')) {
      return;
    }

    setLoading(true);
    
    try {
      // 检查用户ID
      if (!user?.id) {
        alert('用户未登录或会话已过期，请刷新页面');
        return;
      }

      console.log('正在删除API密钥:', { keyId, userId: user.id });
      
      // 使用Supabase直接删除
      const { error } = await supabase
        .from('api_keys')
        .delete()
        .match({ id: keyId, user_id: user.id });
      
      if (error) {
        console.error('删除API密钥失败:', error);
        alert(`删除API密钥失败: ${error.message}`);
        return;
      }
      
      console.log('API密钥删除成功:', keyId);
      
      // 从列表中移除已删除的密钥
      setApiKeys(prev => prev.filter(key => key.id !== keyId));
      
      // 显示成功消息
      alert('API密钥删除成功');
    } catch (error: any) {
      console.error('删除API密钥时出错:', error);
      alert(`删除API密钥失败: ${error.message || '未知错误'}`);
    } finally {
      setLoading(false);
    }
  };

  const toggleKeyVisibility = (keyId: string) => {
    const newVisibleKeys = new Set(visibleKeys);
    if (newVisibleKeys.has(keyId)) {
      newVisibleKeys.delete(keyId);
    } else {
      newVisibleKeys.add(keyId);
    }
    setVisibleKeys(newVisibleKeys);
  };

  const copyToClipboard = async (text: string, keyId: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedKey(keyId);
      setTimeout(() => setCopiedKey(null), 2000);
    } catch (error) {
      console.error('复制失败:', error);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('zh-CN');
  };

  const maskApiKey = (key: string) => {
    if (key.length <= 8) return key;
    return key.substring(0, 4) + '••••••••' + key.substring(key.length - 4);
  };

  return (
    <div className="min-h-screen bg-dark-bg-primary py-8">
      <div className="container-custom">
        {/* 头部 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-4xl font-bold gradient-text mb-2">账户管理</h1>
          <p className="text-gray-400">管理您的个人信息和API密钥</p>
        </motion.div>

        {/* 标签页导航 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="mb-8"
        >
          <div className="border-b border-neon-cyan/20">
            <nav className="flex space-x-8">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`group relative flex items-center space-x-2 py-4 px-1 border-b-2 transition-all duration-300 ${
                      activeTab === tab.id
                        ? 'border-neon-cyan text-neon-cyan'
                        : 'border-transparent text-gray-400 hover:text-neon-cyan hover:border-neon-cyan/50'
                    }`}
                  >
                    <Icon className="h-5 w-5" />
                    <span className="font-medium">{tab.name}</span>
                    {activeTab === tab.id && (
                      <motion.div
                        layoutId="activeTab"
                        className="absolute inset-0 rounded-lg bg-neon-cyan/10"
                        transition={{ type: "spring", bounce: 0.2, duration: 0.6 }}
                      />
                    )}
                  </button>
                );
              })}
            </nav>
          </div>
        </motion.div>

        {/* 内容区域 */}
        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
          >
            {activeTab === 'profile' && (
              <div className="space-y-8">
                {/* 个人信息卡片 */}
                <div className="glass rounded-2xl p-8 border border-neon-cyan/20">
                  <div className="flex items-center space-x-6 mb-6">
                    <div className="relative">
                      <div className="w-24 h-24 rounded-full bg-gradient-to-br from-neon-cyan to-neon-pink p-1">
                        <div className="w-full h-full rounded-full bg-dark-bg-primary flex items-center justify-center">
                          <UserIcon className="h-12 w-12 text-neon-cyan" />
                        </div>
                      </div>
                      <div className="absolute -bottom-2 -right-2 w-8 h-8 bg-neon-green rounded-full border-2 border-dark-bg-primary flex items-center justify-center">
                        <div className="w-3 h-3 bg-neon-green rounded-full animate-pulse"></div>
                      </div>
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-white mb-1">{user?.username}</h2>
                      <div className="flex items-center space-x-2 text-gray-400">
                        <EnvelopeIcon className="h-4 w-4" />
                        <span>{user?.email}</span>
                      </div>
                      <div className="flex items-center space-x-2 text-gray-400 mt-1">
                        <CalendarIcon className="h-4 w-4" />
                        <span>加入于 {user?.created_at ? formatDate(user.created_at) : '未知'}</span>
                      </div>
                    </div>
                  </div>

                  {/* 统计信息 */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="text-center p-4 glass rounded-xl border border-neon-cyan/10">
                      <SparklesIcon className="h-8 w-8 text-neon-cyan mx-auto mb-2" />
                      <div className="text-2xl font-bold text-white">{promptCount}</div>
                      <div className="text-sm text-gray-400">创建的提示词</div>
                    </div>
                    <div className="text-center p-4 glass rounded-xl border border-neon-purple/10">
                      <KeyIcon className="h-8 w-8 text-neon-purple mx-auto mb-2" />
                      <div className="text-2xl font-bold text-white">{apiKeys.length}</div>
                      <div className="text-sm text-gray-400">API密钥</div>
                    </div>
                    <div className="text-center p-4 glass rounded-xl border border-neon-pink/10">
                      <UserIcon className="h-8 w-8 text-neon-pink mx-auto mb-2" />
                      <div className="text-2xl font-bold text-white">{user?.role || 'user'}</div>
                      <div className="text-sm text-gray-400">账户类型</div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'api-keys' && (
              <div className="space-y-6">
                {/* 创建API密钥按钮 */}
                          const result = await response.json();
                          console.log('认证测试结果:', result);
                          alert(`认证测试: ${JSON.stringify(result, null, 2)}`);
                        } catch (error) {
                          console.error('认证测试失败:', error);
                          alert('认证测试失败');
                        }
                      }}
                      className="btn-secondary text-sm"
                    >
                      测试认证
                    </motion.button>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setShowCreateForm(true)}
                      className="btn-primary flex items-center space-x-2"
                    >
                      <PlusIcon className="h-5 w-5" />
                      <span>创建密钥</span>
                    </motion.button>
                  </div>
                </div>

                {/* 创建密钥表单 */}
                <AnimatePresence>
                  {showCreateForm && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="glass rounded-2xl p-6 border border-neon-cyan/20"
                    >
                      <h3 className="text-lg font-semibold text-white mb-4">创建新的API密钥</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">
                            密钥名称
                          </label>
                          <input
                            type="text"
                            value={newKeyName}
                            onChange={(e) => setNewKeyName(e.target.value)}
                            placeholder="例如：开发环境"
                            className="input-primary w-full"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">
                            有效期
                          </label>
                          <select
                            value={newKeyExpiry}
                            onChange={(e) => setNewKeyExpiry(Number(e.target.value))}
                            className="input-primary w-full"
                          >
                            {expiryOptions.map((option) => (
                              <option key={option.value} value={option.value}>
                                {option.label}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>
                      <div className="flex space-x-3">
                        <button
                          onClick={createApiKey}
                          disabled={loading || !newKeyName.trim()}
                          className="btn-primary disabled:opacity-50"
                        >
                          {loading ? '创建中...' : '创建密钥'}
                        </button>
                        <button
                          onClick={() => {
                            setShowCreateForm(false);
                            setNewKeyName('');
                            setNewKeyExpiry(30);
                          }}
                          className="btn-secondary"
                        >
                          取消
                        </button>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* API密钥列表 */}
                {loading && !apiKeys.length ? (
                  <div className="glass rounded-2xl p-8 border border-neon-cyan/20 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-neon-cyan mx-auto mb-4"></div>
                    <p className="text-gray-400">加载中...</p>
                  </div>
                ) : apiKeys.length === 0 ? (
                  <div className="glass rounded-2xl p-8 border border-neon-cyan/20 text-center">
                    <KeyIcon className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                    <p className="text-gray-400">您还没有创建任何API密钥</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {apiKeys.map((apiKey, index) => (
                      <motion.div
                        key={apiKey.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="glass rounded-2xl p-6 border border-neon-cyan/20 hover:border-neon-cyan/40 transition-all duration-300"
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex-1">
                            <div className="flex items-center space-x-3 mb-2">
                              <h3 className="text-lg font-semibold text-white">{apiKey.name}</h3>
                              <span className="px-2 py-1 text-xs rounded-full bg-neon-green/20 text-neon-green border border-neon-green/30">
                                活跃
                              </span>
                            </div>
                            <div className="flex items-center space-x-4 text-sm text-gray-400">
                              <span>创建于 {formatDate(apiKey.created_at)}</span>
                              {apiKey.last_used_at && (
                                <span>最后使用 {formatDate(apiKey.last_used_at)}</span>
                              )}
                              {apiKey.expires_in_days > 0 && (
                                <span>
                                  {apiKey.expires_in_days}天后过期
                                </span>
                              )}
                            </div>
                            <div className="flex items-center space-x-2 mt-3">
                              <code className="flex-1 bg-dark-bg-secondary p-3 rounded-lg text-neon-cyan font-mono text-sm">
                                {visibleKeys.has(apiKey.id) ? apiKey.key : maskApiKey(apiKey.key)}
                              </code>
                              <button
                                onClick={() => toggleKeyVisibility(apiKey.id)}
                                className="p-2 glass rounded-lg hover:bg-neon-cyan/10 transition-colors"
                                title={visibleKeys.has(apiKey.id) ? '隐藏密钥' : '显示密钥'}
                              >
                                {visibleKeys.has(apiKey.id) ? (
                                  <EyeSlashIcon className="h-5 w-5 text-gray-400" />
                                ) : (
                                  <EyeIcon className="h-5 w-5 text-gray-400" />
                                )}
                              </button>
                              <button
                                onClick={() => copyToClipboard(apiKey.key, apiKey.id)}
                                className="p-2 glass rounded-lg hover:bg-neon-cyan/10 transition-colors"
                                title="复制密钥"
                              >
                                {copiedKey === apiKey.id ? (
                                  <CheckIcon className="h-5 w-5 text-neon-green" />
                                ) : (
                                  <ClipboardIcon className="h-5 w-5 text-gray-400" />
                                )}
                              </button>
                              <button
                                onClick={() => deleteApiKey(apiKey.id)}
                                className="p-2 glass rounded-lg hover:bg-neon-red/10 transition-colors"
                                title="删除密钥"
                              >
                                <TrashIcon className="h-5 w-5 text-neon-red" />
                              </button>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {activeTab === 'my-prompts' && (
              <div className="space-y-6">
                {/* 创建提示词按钮 */}
                <div className="flex justify-between items-center">
                  <div>
                    <h2 className="text-2xl font-bold text-white">我的提示词</h2>
                    <p className="text-gray-400 mt-1">创建和管理您的提示词</p>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className="btn-primary flex items-center space-x-2"
                  >
                    <Link href="/create" className="flex items-center space-x-2">
                      <PlusIcon className="h-5 w-5" />
                      <span>创建提示词</span>
                    </Link>
                  </motion.button>
                </div>

                {/* 提示词列表 */}
                {promptsLoading && !userPrompts.length ? (
                  <div className="glass rounded-2xl p-8 border border-neon-cyan/20 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-neon-cyan mx-auto mb-4"></div>
                    <p className="text-gray-400">加载中...</p>
                  </div>
                ) : userPrompts.length === 0 ? (
                  <div className="glass rounded-2xl p-8 border border-neon-cyan/20 text-center">
                    <DocumentTextIcon className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                    <p className="text-gray-400">您还没有创建任何提示词</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {userPrompts.map((prompt, index) => (
                      <motion.div
                        key={prompt.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="glass rounded-2xl p-6 border border-neon-cyan/20 hover:border-neon-cyan/40 transition-all duration-300"
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex-1">
                            <div className="flex items-center space-x-3 mb-2">
                              <h3 className="text-lg font-semibold text-white">{prompt.name}</h3>
                              <span className={`px-2 py-1 text-xs rounded-full ${
                                prompt.is_public 
                                  ? 'bg-neon-green/20 text-neon-green border border-neon-green/30'
                                  : 'bg-neon-orange/20 text-neon-orange border border-neon-orange/30'
                              }`}>
                                {prompt.is_public ? '公开' : '私有'}
                              </span>
                              <span className="px-2 py-1 text-xs rounded-full bg-neon-purple/20 text-neon-purple border border-neon-purple/30">
                                {prompt.category}
                              </span>
                            </div>
                            <p className="text-gray-300 mb-3">{prompt.description}</p>
                            
                            {/* 标签展示 */}
                            {prompt.tags && prompt.tags.length > 0 && (
                              <div className="flex flex-wrap gap-1 mb-3">
                                {prompt.tags.slice(0, 3).map((tag, tagIndex) => (
                                  <span
                                    key={tagIndex}
                                    className="px-2 py-1 text-xs rounded-full bg-neon-cyan/10 text-neon-cyan border border-neon-cyan/20"
                                  >
                                    {tag}
                                  </span>
                                ))}
                                {prompt.tags.length > 3 && (
                                  <span className="px-2 py-1 text-xs rounded-full bg-gray-600/20 text-gray-400 border border-gray-600/20">
                                    +{prompt.tags.length - 3}
                                  </span>
                                )}
                              </div>
                            )}
                            
                            <div className="flex items-center space-x-4 text-sm text-gray-400 mb-4">
                              <span>创建于 {formatDate(prompt.created_at)}</span>
                              {prompt.updated_at && <span>最后更新 {formatDate(prompt.updated_at)}</span>}
                            </div>
                            
                            <div className="flex items-center space-x-2">
                              <Link
                                href={`/prompts/${prompt.id}`}
                                className="p-2 glass rounded-lg hover:bg-neon-cyan/10 transition-colors group"
                                title="查看提示词详情"
                              >
                                <ArrowTopRightOnSquareIcon className="h-5 w-5 text-gray-400 group-hover:text-neon-cyan" />
                              </Link>
                              <Link
                                href={`/prompts/${prompt.id}/edit`}
                                className="p-2 glass rounded-lg hover:bg-neon-purple/10 transition-colors group"
                                title="编辑提示词"
                              >
                                <PencilIcon className="h-5 w-5 text-gray-400 group-hover:text-neon-purple" />
                              </Link>
                              <button
                                onClick={() => copyToClipboard(prompt.name, prompt.id)}
                                className="p-2 glass rounded-lg hover:bg-neon-green/10 transition-colors group"
                                title="复制提示词名称"
                              >
                                {copiedKey === prompt.id ? (
                                  <CheckIcon className="h-5 w-5 text-neon-green" />
                                ) : (
                                  <ClipboardIcon className="h-5 w-5 text-gray-400 group-hover:text-neon-green" />
                                )}
                              </button>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
};

export default withAuth(ProfilePage);


