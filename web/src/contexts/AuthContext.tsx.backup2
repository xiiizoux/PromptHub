import React, { createContext, useContext, useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { User } from '@/types';

// 定义认证上下文的类型
interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  login: (email: string, password: string, remember?: boolean) => Promise<void>;
  register: (username: string, email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  signOut: () => Promise<void>; // 添加别名，与logout相同
  getToken: () => Promise<string | null>; // 获取当前用户的访问令牌
  checkAuth: () => Promise<boolean>;
  isAuthenticated: boolean;
}

// 创建认证上下文
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// 认证提供者组件
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // 初始化时检查认证状态
  useEffect(() => {
    const initAuth = async () => {
      try {
        // 只在客户端执行认证检查
        if (typeof window !== 'undefined') {
          console.log('初始化认证状态检查...');
          await checkAuth();
          
          // 监听认证状态变化
          const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
            console.log('Auth state change:', event, session?.user?.id);
            
            if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
              if (session?.user) {
                await ensureUserInDatabase(session.user);
              }
            } else if (event === 'SIGNED_OUT') {
              setUser(null);
              setIsAuthenticated(false);
            }
          });

          return () => subscription.unsubscribe();
        } else {
          console.log('服务器端，跳过认证初始化');
        }
      } catch (error) {
        console.error('认证初始化失败:', error);
        setUser(null);
        setIsAuthenticated(false);
      } finally {
        // 确保loading状态被设置为false
        setLoading(false);
      }
    };

    initAuth();
  }, []);

  // 确保用户数据在数据库中
  const ensureUserInDatabase = async (authUser: any) => {
    try {
      // 检查用户是否已存在于users表
      const { data: existingUser, error: fetchError } = await supabase
        .from('users')
        .select('*')
        .eq('id', authUser.id)
        .single();

      if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 表示未找到记录
        console.error('检查用户存在性失败:', fetchError);
        return;
      }

      // 如果用户不存在，创建用户记录
      if (!existingUser) {
        const userData = {
          id: authUser.id,
          email: authUser.email,
          display_name: authUser.user_metadata?.username || 
                       authUser.user_metadata?.full_name || 
                       authUser.email?.split('@')[0] || 'User',
          role: 'user',
          created_at: authUser.created_at
        };

        const { error: insertError } = await supabase
          .from('users')
          .insert(userData);

        if (insertError) {
          console.error('创建用户记录失败:', insertError);
        } else {
          console.log('用户记录创建成功:', userData);
        }
      }

      // 更新本地用户状态
      const finalUserData = existingUser || {
        id: authUser.id,
        email: authUser.email,
        display_name: authUser.user_metadata?.username || 
                     authUser.user_metadata?.full_name || 
                     authUser.email?.split('@')[0] || 'User',
        role: 'user',
        created_at: authUser.created_at || new Date().toISOString()
      };

      const appUser: User = {
        id: finalUserData.id,
        username: finalUserData.display_name,
        email: finalUserData.email,
        role: finalUserData.role || 'user',
        created_at: finalUserData.created_at || new Date().toISOString()
      };

      setUser(appUser);
      setIsAuthenticated(true);
    } catch (err) {
      console.error('确保用户数据同步失败:', err);
    }
  };

  // 检查用户认证状态
  const checkAuth = async (): Promise<boolean> => {
    try {
      console.log('开始认证检查...');
      
      // 确保只在客户端运行
      if (typeof window === 'undefined') {
        console.log('服务器端，跳过认证检查');
        return false;
      }
      
      // 获取当前会话状态
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('获取会话失败:', sessionError);
        setUser(null);
        setIsAuthenticated(false);
        return false;
      }
      
      if (!session || !session.user) {
        console.log('无有效会话或用户');
        setUser(null);
        setIsAuthenticated(false);
        return false;
      }
      
      console.log('找到会话，用户ID:', session.user.id);
      
      // 获取用户信息
      const { data: { user: supaUser }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !supaUser) {
        console.error('获取用户信息失败:', userError);
        setUser(null);
        setIsAuthenticated(false);
        return false;
      }
      
      console.log('Supabase用户信息:', supaUser.id, supaUser.email);
      
      // 尝试从数据库获取完整的用户信息
      let userData = null;
      try {
        const { data, error: userDbError } = await supabase
          .from('users')
          .select('*')
          .eq('id', supaUser.id)
          .single();
        
        if (userDbError) {
          console.warn('从数据库查询用户失败:', userDbError.message, userDbError.code);
          // 如果是因为用户不存在，尝试确保用户在数据库中
          if (userDbError.code === 'PGRST116') {
            console.log('用户不存在于数据库，尝试创建...');
            await ensureUserInDatabase(supaUser);
            // 重新查询
            const { data: retryData, error: retryError } = await supabase
              .from('users')
              .select('*')
              .eq('id', supaUser.id)
              .single();
            
            if (!retryError && retryData) {
              userData = retryData;
              console.log('用户创建成功并查询到数据');
            } else {
              console.error('重新查询用户仍然失败:', retryError);
            }
          }
        } else {
          userData = data;
          console.log('从数据库获取用户信息成功');
        }
      } catch (dbError) {
        console.error('数据库查询异常:', dbError);
      }
      
      // 构建应用用户对象（即使数据库查询失败也要正常运作）
      const appUser: User = {
        id: supaUser.id,
        username: userData?.display_name || supaUser.user_metadata?.username || supaUser.email?.split('@')[0] || 'User',
        email: supaUser.email || '',
        role: userData?.role || 'user',
        created_at: supaUser.created_at || new Date().toISOString()
      };
      
      console.log('设置用户状态:', appUser);
      setUser(appUser);
      setIsAuthenticated(true);
      return true;
    } catch (err) {
      console.error('认证检查失败:', err);
      setUser(null);
      setIsAuthenticated(false);
      return false;
    }
  };

  // 登录
  const login = async (email: string, password: string, remember = false): Promise<void> => {
    setLoading(true);
    setError(null);
    
    try {
      // 使用Supabase进行邮箱密码登录
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      
      if (error) {
        throw error;
      }
      
      if (data.user) {
        // 从数据库获取完整的用户信息
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('*')
          .eq('id', data.user.id)
          .single();
        
        const appUser: User = {
          id: data.user.id,
          username: userData?.display_name || data.user.email?.split('@')[0] || '',
          email: data.user.email || '',
          role: userData?.role || 'user',
          created_at: data.user.created_at || new Date().toISOString()
        };
        
        setUser(appUser);
        setIsAuthenticated(true);
      } else {
        throw new Error('登录失败：未能获取用户信息');
      }
    } catch (err: any) {
      console.error('登录失败:', err);
      setError(err.message || '登录失败，请检查您的凭据');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // 注册
  const register = async (username: string, email: string, password: string): Promise<void> => {
    setLoading(true);
    setError(null);
    
    try {
      // 使用Supabase创建新用户
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            username,
            full_name: username
          }
        }
      });
      
      if (error) {
        throw error;
      }

      // 如果用户立即确认（比如在开发模式下），同步数据到users表
      if (data.user && data.user.email_confirmed_at) {
        try {
          const { error: insertError } = await supabase
            .from('users')
            .insert({
              id: data.user.id,
              email: email,
              display_name: username,
              role: 'user',
              created_at: data.user.created_at
            });
            
          if (insertError && insertError.code !== '23505') { // 23505 是重复键错误
            console.error('创建用户记录失败:', insertError);
          }
        } catch (insertErr) {
          console.error('插入用户数据时出错:', insertErr);
        }
      }
      
      // 注册成功，但可能需要邮箱验证
      return;
    } catch (err: any) {
      console.error('注册失败:', err);
      setError(err.message || '注册失败，请稍后再试');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // 登出
  const logout = async (): Promise<void> => {
    setLoading(true);
    
    try {
      // 使用Supabase登出
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        throw error;
      }
      
      // 清除应用状态
      setUser(null);
      setIsAuthenticated(false);
    } catch (err: any) {
      console.error('登出失败:', err);
      setError(err.message || '登出失败，请稍后再试');
    } finally {
      setLoading(false);
    }
  };

  // 获取当前用户的访问令牌
  const getToken = async (): Promise<string | null> => {
    try {
      // 确保只在客户端运行
      if (typeof window === 'undefined') {
        return null;
      }
      
      // 获取当前会话并自动刷新令牌
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('获取会话失败:', error);
        return null;
      }
      
      if (!session) {
        console.warn('没有有效的用户会话');
        return null;
      }
      
      // 检查令牌是否即将过期（提前5分钟刷新）
      const expiresAt = session.expires_at || 0;
      const now = Math.floor(Date.now() / 1000);
      const timeUntilExpiry = expiresAt - now;
      
      if (timeUntilExpiry < 300) { // 5分钟 = 300秒
        console.log('令牌即将过期，尝试刷新...');
        const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
        
        if (refreshError) {
          console.error('刷新令牌失败:', refreshError);
          return session.access_token;
        }
        
        if (refreshData.session) {
          console.log('令牌刷新成功');
          return refreshData.session.access_token;
        }
      }
      
      return session.access_token;
    } catch (err) {
      console.error('获取令牌失败:', err);
      return null;
    }
  };

  const value = {
    user,
    loading,
    error,
    login,
    register,
    logout,
    signOut: logout, // 添加别名，与logout相同
    getToken,
    checkAuth,
    isAuthenticated
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// 自定义Hook，用于访问认证上下文
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// 保护路由的高阶组件
export const withAuth = <P extends object>(Component: React.ComponentType<P>): React.FC<P> => {
  const AuthComponent: React.FC<P> = (props) => {
    const { isAuthenticated, loading } = useAuth();
    const [mounted, setMounted] = useState(false);
    const [redirecting, setRedirecting] = useState(false);

    useEffect(() => {
      setMounted(true);
    }, []);

    useEffect(() => {
      // 只在客户端挂载完成后执行路由重定向
      if (mounted && !loading && !isAuthenticated && !redirecting) {
        setRedirecting(true);
        
        // 使用Next.js动态导入router避免SSR问题
        import('next/router').then(({ default: Router }) => {
          const currentUrl = window.location.pathname + window.location.search;
          Router.push(`/auth/login?returnUrl=${encodeURIComponent(currentUrl)}`);
        }).catch(() => {
          // 如果Next.js路由器失败，回退到原生方法
          const currentUrl = window.location.pathname + window.location.search;
          window.location.href = `/auth/login?returnUrl=${encodeURIComponent(currentUrl)}`;
        });
      }
    }, [mounted, isAuthenticated, loading, redirecting]);

    // 在服务器端渲染时，返回null避免内容闪烁
    if (typeof window === 'undefined') {
      return null;
    }

    // 组件未挂载或正在重定向时，返回null避免闪烁
    if (!mounted || redirecting) {
      return null;
    }

    // 正在加载认证状态时，显示cyberpunk风格的加载界面
    if (loading) {
      return (
        <div className="min-h-screen bg-dark-bg-primary flex items-center justify-center relative overflow-hidden">
          {/* 背景装饰 */}
          <div className="absolute inset-0">
            <div className="absolute top-1/4 -right-48 w-96 h-96 bg-gradient-to-br from-neon-cyan/20 to-neon-purple/20 rounded-full blur-3xl"></div>
            <div className="absolute bottom-1/4 -left-48 w-96 h-96 bg-gradient-to-tr from-neon-pink/20 to-neon-purple/20 rounded-full blur-3xl"></div>
          </div>
          
          {/* 加载内容 */}
          <div className="relative z-10 text-center">
            {/* 旋转的加载图标 */}
            <div className="relative mx-auto mb-8">
              <div className="w-16 h-16 border-4 border-neon-cyan/30 rounded-full animate-spin">
                <div className="absolute top-0 left-0 w-full h-full border-4 border-transparent border-t-neon-cyan rounded-full animate-pulse"></div>
              </div>
              <div className="absolute inset-0 w-16 h-16 border-4 border-neon-purple/20 rounded-full animate-ping"></div>
            </div>
            
            {/* 加载文本 */}
            <div className="space-y-2">
              <h3 className="text-xl font-bold gradient-text">验证身份中</h3>
              <p className="text-gray-400 text-sm">正在连接到服务器...</p>
            </div>
            
            {/* 装饰线条 */}
            <div className="mt-8 flex justify-center space-x-1">
              {[0, 1, 2].map((i) => (
                <div
                  key={i}
                  className="w-2 h-2 bg-neon-cyan rounded-full animate-pulse"
                  style={{ animationDelay: `${i * 0.2}s` }}
                ></div>
              ))}
            </div>
          </div>
        </div>
      );
    }

    // 用户未认证，返回null等待重定向
    if (!isAuthenticated) {
      return null;
    }

    // 认证通过，渲染原始组件
    return <Component {...props} />;
  };

  // 设置组件显示名称
  const displayName = Component.displayName || Component.name || 'Component';
  AuthComponent.displayName = `withAuth(${displayName})`;

  return AuthComponent;
};
